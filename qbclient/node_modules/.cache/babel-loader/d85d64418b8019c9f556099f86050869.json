{"ast":null,"code":"var _jsxFileName = \"/Users/seansugrue/QuestBorard/qbclient/src/ComponentsChat/Store.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CTX = /*#__PURE__*/React.createContext();\nconst initialState = {\n  General: [{\n    from: \"PAPA\",\n    msg: \"GOT IT\"\n  }, {\n    from: \"SHANE\",\n    msg: \"THANK GOD\"\n  }, {\n    from: \"JOHN\",\n    msg: \"WHATS THAT?\"\n  }],\n  ActiveGame: [{\n    from: \"PAPA\",\n    msg: \"THINKING OF ROOM NAMES\"\n  }, {\n    from: \"SHANE\",\n    msg: \"JUST DON'T\"\n  }, {\n    from: \"JOHN\",\n    msg: \"I KNOW THIS D&D BETTER THAN SEAN!\"\n  }]\n};\n\nfunction reducer(state, action) {\n  const {\n    from,\n    msg,\n    topic\n  } = action.payload;\n\n  switch (action.type) {\n    case \"RECEIVE_MESSAGE\":\n      return { ...state,\n        [topic]: [...state[topic], {\n          from,\n          msg\n        }]\n      };\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nlet socket;\n\nfunction sendChatMsg(value) {\n  socket.emit(\"chat-msg\", value);\n}\n\nexport default function Store(props) {\n  _s();\n\n  const [allChats, dispatch] = React.useReducer(reducer, initialState);\n\n  if (!socket) {\n    socket = io(\":3001\");\n    socket.on(\"chat-msg\", function (data) {\n      dispatch({\n        type: \"RECEIVE_MESSAGE\",\n        payload: data\n      });\n    });\n  }\n\n  const user = `user ${Math.floor(Math.random() * 100)}`;\n  return /*#__PURE__*/_jsxDEV(CTX.Provider, {\n    value: {\n      allChats,\n      sendChatMsg,\n      user\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Store, \"UN+jghOyIRd32gNvImzJ62ccBkg=\");\n\n_c = Store;\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"sources":["/Users/seansugrue/QuestBorard/qbclient/src/ComponentsChat/Store.js"],"names":["React","io","CTX","createContext","initialState","General","from","msg","ActiveGame","reducer","state","action","topic","payload","type","socket","sendChatMsg","value","emit","Store","props","allChats","dispatch","useReducer","on","data","user","Math","floor","random","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,OAAO,MAAMC,GAAG,gBAAGF,KAAK,CAACG,aAAN,EAAZ;AAEP,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,CACP;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GADO,EAEP;AAAED,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GAFO,EAGP;AAAED,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAHO,CADU;AAMnBC,EAAAA,UAAU,EAAE,CACV;AAAEF,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GADU,EAEV;AAAED,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,GAAG,EAAE;AAAtB,GAFU,EAGV;AAAED,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,GAAG,EAAE;AAArB,GAHU;AANO,CAArB;;AAYA,SAASE,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,QAAM;AAAEL,IAAAA,IAAF;AAAQC,IAAAA,GAAR;AAAaK,IAAAA;AAAb,MAAuBD,MAAM,CAACE,OAApC;;AAEA,UAAQF,MAAM,CAACG,IAAf;AACE,SAAK,iBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAEL,SAACE,KAAD,GAAS,CACP,GAAGF,KAAK,CAACE,KAAD,CADD,EAEP;AACEN,UAAAA,IADF;AAEEC,UAAAA;AAFF,SAFO;AAFJ,OAAP;;AAWF;AAAS;AACP,eAAOG,KAAP;AACD;AAfH;AAiBD;;AACD,IAAIK,MAAJ;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BF,EAAAA,MAAM,CAACG,IAAP,CAAY,UAAZ,EAAwBD,KAAxB;AACD;;AAED,eAAe,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACnC,QAAM,CAACC,QAAD,EAAWC,QAAX,IAAuBtB,KAAK,CAACuB,UAAN,CAAiBd,OAAjB,EAA0BL,YAA1B,CAA7B;;AAEA,MAAI,CAACW,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAGd,EAAE,CAAC,OAAD,CAAX;AACAc,IAAAA,MAAM,CAACS,EAAP,CAAU,UAAV,EAAsB,UAAUC,IAAV,EAAgB;AACpCH,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAE,iBAAR;AAA2BD,QAAAA,OAAO,EAAEY;AAApC,OAAD,CAAR;AACD,KAFD;AAGD;;AAED,QAAMC,IAAI,GAAI,QAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAAgC,EAArD;AAEA,sBACE,QAAC,GAAD,CAAK,QAAL;AAAc,IAAA,KAAK,EAAE;AAAER,MAAAA,QAAF;AAAYL,MAAAA,WAAZ;AAAyBU,MAAAA;AAAzB,KAArB;AAAA,cACGN,KAAK,CAACU;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjBuBX,K;;KAAAA,K","sourcesContent":["import React from \"react\";\nimport io from \"socket.io-client\";\n\nexport const CTX = React.createContext();\n\nconst initialState = {\n  General: [\n    { from: \"PAPA\", msg: \"GOT IT\" },\n    { from: \"SHANE\", msg: \"THANK GOD\" },\n    { from: \"JOHN\", msg: \"WHATS THAT?\" },\n  ],\n  ActiveGame: [\n    { from: \"PAPA\", msg: \"THINKING OF ROOM NAMES\" },\n    { from: \"SHANE\", msg: \"JUST DON'T\" },\n    { from: \"JOHN\", msg: \"I KNOW THIS D&D BETTER THAN SEAN!\" },\n  ],\n};\nfunction reducer(state, action) {\n  const { from, msg, topic } = action.payload;\n\n  switch (action.type) {\n    case \"RECEIVE_MESSAGE\":\n      return {\n        ...state,\n        [topic]: [\n          ...state[topic],\n          {\n            from,\n            msg,\n          },\n        ],\n      };\n\n    default: {\n      return state;\n    }\n  }\n}\nlet socket;\n\nfunction sendChatMsg(value) {\n  socket.emit(\"chat-msg\", value);\n}\n\nexport default function Store(props) {\n  const [allChats, dispatch] = React.useReducer(reducer, initialState);\n\n  if (!socket) {\n    socket = io(\":3001\");\n    socket.on(\"chat-msg\", function (data) {\n      dispatch({ type: \"RECEIVE_MESSAGE\", payload: data });\n    });\n  }\n\n  const user = `user ${Math.floor(Math.random() * 100)}`;\n\n  return (\n    <CTX.Provider value={{ allChats, sendChatMsg, user }}>\n      {props.children}\n    </CTX.Provider>\n  );\n}"]},"metadata":{},"sourceType":"module"}